AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DeploymentStage:
    Type: String
    AllowedValues:
      - Dev
      - Staging
      - Production
    Description: Enter what type of deployment this is.  Either Dev, Staging, or Production.

Conditions:
  IsDevelopment: !Equals [ !Ref DeploymentStage, Dev ]

Globals:
  Function:
    Handler: 'lambda_function.lambda_handler'
    Runtime: python3.7
    Tags:
      Stage: !Ref DeploymentStage

Resources:
  PublicApi:
    Type: AWS::Serverless::Api
    Properties:
      Cors: "'cfbgameoftheweek.com'"
      Domain: 
        CertificateArn: arn:aws:acm:us-east-1:098833178654:certificate/68cc6d43-7770-44cb-8888-300c5a4e1fba
        DomainName: api.cfbgameoftheweek.com
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: Z3GD4I5545SJNV
      EndpointConfiguration: EDGE
      Name: "Public API"
      StageName: !Ref DeploymentStage

  ComputeWeekLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: computeWeekModule/
      Description: Translates one week of games into several seperate games in a SQS queue.
      Environment:
        Variables:
          QueueUrl: !Ref GamesQueue
      FunctionName: !Join [ '-', [ !If [IsDevelopment, !Ref "AWS::StackName", !Ref DeploymentStage], 'ComputeWeekLambda' ] ]
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt GamesQueue.QueueName
      Timeout: 10

  ComputeScoreLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: computeScoreModule/
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadGamesQueue.Arn
      Description: Computes an entertainment score for each game and places into a DynamoDB table.
      Environment:
        Variables:
          CalculatedScoresTableName: CalculatedScores
      Events:
        NewGameEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt GamesQueue.Arn
            BatchSize: 1
            Enabled: true
      FunctionName: !Join [ '-', [ !If [IsDevelopment, !Ref "AWS::StackName", !Ref DeploymentStage], 'ComputeScoreLambda' ] ]
      Policies:
        - DynamoDBReadPolicy:
            TableName: 1stDowns
        - DynamoDBReadPolicy:
            TableName: 2ndDowns
        - DynamoDBReadPolicy:
            TableName: 3rdDowns
        - DynamoDBReadPolicy:
            TableName: 4thDowns
        - DynamoDBCrudPolicy:
            TableName: CalculatedScores
      Timeout: 300

  AvailibleWeeksLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: availibleWeeksModule/
      Description: Returns a list of years and weeks that the database currently holds.
      Environment:
        Variables:
          CalculatedScoresTableName: CalculatedScores
      Events:
        GetAvailibleWeeks:
          Type: Api
          Properties:
            Path: /availibleWeeks
            Method: GET
            RestApiId: !Ref PublicApi
      FunctionName: !Join [ '-', [ !If [IsDevelopment, !Ref "AWS::StackName", !Ref DeploymentStage], 'AvailibleWeeksLambda' ] ]
      Policies:
        - DynamoDBReadPolicy:
            TableName: CalculatedScores
      Timeout: 3

  AccessLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: accessModule/
      Handler: 'access_module.handle_access'
      Description: Gets and returns a week of entertainment scores and games for a season.
      Environment:
        Variables:
          CalculatedScoresTableName: CalculatedScores
      Events:
        GetEntertainmentScore:
          Type: Api
          Properties:
            Path: /entertainmentScores
            Method: GET
            RestApiId: !Ref PublicApi
      FunctionName: !Join [ '-', [ !If [IsDevelopment, !Ref "AWS::StackName", !Ref DeploymentStage], 'AccessLambda' ] ]
      Policies:
        - DynamoDBReadPolicy:
            TableName: CalculatedScores
      Timeout: 3

  DeadGamesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join [ '-', [ !If [IsDevelopment, !Ref "AWS::StackName", !Ref DeploymentStage], 'DeadLetterGamesQueue' ] ]
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
  GamesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Join [ '-', [ !If [IsDevelopment, !Ref "AWS::StackName", !Ref DeploymentStage], 'GamesQueue' ] ]
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
      VisibilityTimeout: 900

