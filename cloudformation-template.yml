Parameters:
  DeploymentStage:
    Type: String
    AllowedValues:
      - Dev
      - Staging
      - Production
    Description: Enter what type of deployment this is.  Either Dev, Staging, or Production.
  S3CodeBucket:
    Type: String
    AllowedPattern: "(?=^.{3,63}$)(?!^(\\d+\\.)+\\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])$)"
    ConstraintDescription: Must be a valid S3 bucket name.
    Description: The S3 folder where the lambda function code is located.
  ComputeWeekLambdaKey:
    Type: String
    AllowedPattern: ".+\\.zip"
    ConstraintDescription: Filename must end in .zip
    Description: The name of the code for the Compute Score lambda in S3.
  ComputeScoreLambdaKey:
    Type: String
    AllowedPattern: ".+\\.zip"
    ConstraintDescription: Filename must end in .zip
    Description: The name of the code for the Compute Score lambda in S3.
  AccessLambdaKey:
    Type: String
    AllowedPattern: ".+\\.zip"
    ConstraintDescription: Filename must end in .zip
    Description: The name of the code for the Access lambda in S3.

Conditions:
  IsDevelopment: !Equals [ !Ref DeploymentStage, Dev ]

Resources:
  ComputeWeekRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        -
          "arn:aws:iam::098833178654:policy/service-role/AWSLambdaBasicExecutionRole-c69b7a60-2ad5-40fe-9ad0-552b817c48da"
      Path: !Join [ '', [ '/', !Ref DeploymentStage, '/lambda/' ] ]
      Policies:
        -
          PolicyName: GamesQueueReadWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  -
                    sqs:DeleteMessage
                    sqs:GetQueueUrl
                    sqs:ChangeMessageVisibility
                    sqs:SendMessageBatch
                    sqs:ReceiveMessage
                    sqs:SendMessage
                    sqs:GetQueueAttributes
                    sqs:ListQueueTags
                    sqs:ListDeadLetterSourceQueues
                    sqs:DeleteMessageBatch
                    sqs:PurgeQueue
                    sqs:DeleteQueue
                    sqs:CreateQueue
                    sqs:ChangeMessageVisibilityBatch
                    sqs:SetQueueAttributes
                Resource: !GetAtt GamesQueue.Arn
  ComputeScoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::098833178654:policy/service-role/AWSLambdaBasicExecutionRole-c69b7a60-2ad5-40fe-9ad0-552b817c48da"
        - "arn:aws:iam::098833178654:policy/AccessExpectedPointsTables"
      Path: !Join [ '', [ '/', !Ref DeploymentStage, '/lambda/' ] ]
      Policies:
        -
          PolicyName: CalculatedScoresTableWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  -
                    dynamodb:BatchWriteItem,
                    dynamodb:PutItem
                Resource: !GetAtt CalculatedScoresTable.Arn
  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        -
          "arn:aws:iam::098833178654:policy/service-role/AWSLambdaBasicExecutionRole-c69b7a60-2ad5-40fe-9ad0-552b817c48da"
      Path: !Join [ '', [ '/', !Ref DeploymentStage, '/lambda/' ] ]
      Policies:
        -
          PolicyName: CalculatedScoresTableRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  -
                    dynamodb:BatchGetItem
                    dynamodb:ConditionCheckItem
                    dynamodb:ListTagsOfResource
                    dynamodb:Scan
                    dynamodb:DescribeStream
                    dynamodb:Query
                    dynamodb:DescribeTimeToLive
                    dynamodb:DescribeGlobalTableSettings
                    dynamodb:DescribeTable
                    dynamodb:DescribeGlobalTable
                    dynamodb:GetShardIterator
                    dynamodb:GetItem
                    dynamodb:DescribeContinuousBackups
                    dynamodb:DescribeBackup
                    dynamodb:GetRecords
                Resource: !GetAtt CalculatedScoresTable.Arn


  ComputeWeekLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3CodeBucket
        S3Key: !Ref ComputeWeekLambdaKey
      Description: Translates one week of games into several seperate games in a SQS queue.
      Environment:
        Variables:
          QueueUrl: !Ref GamesQueue
      FunctionName: !If [IsDevelopment, !Ref "AWS::NoValue", !Join [ '-', [ !Ref DeploymentStage, 'ComputeWeekLambda' ] ] ]
      Handler: 'lambda_function.lambda_handler'
      Role: !Ref ComputeWeekRole
      Runtime: python3.7
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
      Timeout: 10
  ComputeScoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3CodeBucket
        S3Key: !Ref ComputeScoreLambdaKey
      Description: Computes an entertainment score for each game and places into a DynamoDB table.
      Environment:
        Variables:
          CalculatedScoresTableName: !Ref CalculatedScoresTable
      FunctionName: !If [IsDevelopment, !Ref "AWS::NoValue", !Join [ '-', [ !Ref DeploymentStage, 'ComputeScoreLambda' ] ] ]
      Handler: 'lambda_function.lambda_handler'
      Role: !Ref ComputeScoreRole
      Runtime: python3.7
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
      Timeout: 300
  AccessLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3CodeBucket
        S3Key: !Ref AccessLambdaKey
      Description: Gets and returns a week of entertainment scores and games for a season.
      Environment:
        Variables:
          CalculatedScoresTableName: !Ref CalculatedScoresTable
      FunctionName: !If [IsDevelopment, !Ref "AWS::NoValue", !Join [ '-', [ !Ref DeploymentStage, 'AccessLambda' ] ] ]
      Handler: 'lambda_function.lambda_handler'
      Role: !Ref AccessRole
      Runtime: python3.7
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
      Timeout: 3
  ComputeScoreTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt GamesQueue.Arn
      FunctionName: !GetAtt ComputeScoreLambda.Arn


  DeadGamesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [IsDevelopment, !Ref "AWS::NoValue", !Join [ '-', [ !Ref DeploymentStage, 'DeadLetterGamesQueue' ] ] ]
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
  GamesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If [IsDevelopment, !Ref "AWS::NoValue", !Join [ '-', [ !Ref DeploymentStage, 'GamesQueue' ] ] ]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadGamesQueue.Arn
        maxReceiveCount: 30
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage


  CalculatedScoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "year:week"
          AttributeType: S
        -
          AttributeName: "score"
          AttributeType: N
        -
          AttributeName: "away"
          AttributeType: S
        -
          AttributeName: "home"
          AttributeType: S
        -
          AttributeName: "play-by-play"
          AttributeType: B
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "year:week"
          KeyType: HASH
        -
          AttributeName: "score"
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 3
      TableName: !If [IsDevelopment, !Ref "AWS::NoValue", !Join [ '-', [ !Ref DeploymentStage, 'CalculatedScores' ] ] ]
      Tags:
        -
          Key: Stage
          Value: !Ref DeploymentStage
